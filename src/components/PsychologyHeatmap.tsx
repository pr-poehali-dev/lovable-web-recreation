import React, { useState, useMemo } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Dialog, DialogContent, DialogHeader, DialogTitle } from '@/components/ui/dialog';
import { Badge } from '@/components/ui/badge';
import { ExecutedTrade } from '@/hooks/useTradingPlans';
import Icon from '@/components/ui/icon';

interface PsychologyHeatmapProps {
  executedTrades: ExecutedTrade[];
}

interface PsychologyCell {
  setup: string;
  session: string;
  errorRate: number;
  total: number;
  errors: number;
  errorTypes: { [key: string]: number };
}

interface AnalysisModalData {
  setup: string;
  session: string;
  errorRate: number;
  total: number;
  errors: number;
  errorTypes: { [key: string]: number };
  avgR: number;
  avgRWithErrors: number;
}

export function PsychologyHeatmap({ executedTrades }: PsychologyHeatmapProps) {
  const [selectedCell, setSelectedCell] = useState<AnalysisModalData | null>(null);

  const { heatmapData, sessions, setups } = useMemo(() => {
    const sessionsSet = new Set<string>();
    const setupsSet = new Set<string>();
    const cellStats: Record<string, { 
      total: number; 
      totalR: number;
      errorTrades: ExecutedTrade[]; 
      errorTypes: { [key: string]: number };
    }> = {};

    executedTrades.forEach(trade => {
      sessionsSet.add(trade.session);
      setupsSet.add(trade.setup);
      
      const key = `${trade.setup}-${trade.session}`;
      if (!cellStats[key]) {
        cellStats[key] = { total: 0, totalR: 0, errorTrades: [], errorTypes: {} };
      }
      
      cellStats[key].total++;
      cellStats[key].totalR += trade.actualR;
      
      // Check for psychological errors (exclude Perfect Execution)
      const hasErrors = trade.psychologyTags.some(tag => tag !== 'Perfect Execution');
      if (hasErrors) {
        cellStats[key].errorTrades.push(trade);
        trade.psychologyTags.forEach(tag => {
          if (tag !== 'Perfect Execution') {
            cellStats[key].errorTypes[tag] = (cellStats[key].errorTypes[tag] || 0) + 1;
          }
        });
      }
    });

    const sessions = Array.from(sessionsSet).sort();
    const setups = Array.from(setupsSet).sort();

    const heatmapData: PsychologyCell[] = [];
    
    setups.forEach(setup => {
      sessions.forEach(session => {
        const key = `${setup}-${session}`;
        const stats = cellStats[key];
        
        if (stats && stats.total > 0) {
          const errorRate = (stats.errorTrades.length / stats.total) * 100;
          heatmapData.push({
            setup,
            session,
            errorRate: Number(errorRate.toFixed(0)),
            total: stats.total,
            errors: stats.errorTrades.length,
            errorTypes: stats.errorTypes
          });
        } else {
          heatmapData.push({
            setup,
            session,
            errorRate: 0,
            total: 0,
            errors: 0,
            errorTypes: {}
          });
        }
      });
    });

    return { heatmapData, sessions, setups };
  }, [executedTrades]);

  const getCellColor = (errorRate: number, total: number) => {
    if (total === 0) return 'bg-muted/50';
    
    if (errorRate === 0) return 'bg-green-600'; // –ß–∏—Å—Ç–æ (0%)
    if (errorRate <= 20) return 'bg-green-500'; // –ù–µ–º–Ω–æ–≥–æ (<20%)
    if (errorRate <= 50) return 'bg-yellow-500'; // –ú–Ω–æ–≥–æ (20-50%)
    return 'bg-red-500'; // –ö—Ä–∏—Ç–∏—á–Ω–æ (>50%)
  };

  const getCellTextColor = (total: number) => {
    if (total === 0) return 'text-muted-foreground';
    return 'text-white';
  };

  const openAnalysis = (cell: PsychologyCell) => {
    if (cell.total === 0) return;
    
    // Calculate additional metrics for the modal
    const relevantTrades = executedTrades.filter(
      trade => trade.setup === cell.setup && trade.session === cell.session
    );
    
    const avgR = relevantTrades.length > 0 
      ? relevantTrades.reduce((sum, trade) => sum + trade.actualR, 0) / relevantTrades.length
      : 0;
    
    const errorTrades = relevantTrades.filter(trade => 
      trade.psychologyTags.some(tag => tag !== 'Perfect Execution')
    );
    
    const avgRWithErrors = errorTrades.length > 0
      ? errorTrades.reduce((sum, trade) => sum + trade.actualR, 0) / errorTrades.length
      : 0;

    setSelectedCell({
      ...cell,
      avgR: Number(avgR.toFixed(2)),
      avgRWithErrors: Number(avgRWithErrors.toFixed(2))
    });
  };

  const getErrorTypeColor = (errorType: string) => {
    switch (errorType) {
      case 'Rule Break: Entry': return 'bg-red-500';
      case 'Rule Break: Size': return 'bg-red-600';
      case 'Revenge Trade': return 'bg-red-700';
      case 'Hoped Hope': return 'bg-red-400';
      case 'Averaging Down': return 'bg-red-500';
      case 'Early Exit': return 'bg-orange-500';
      case 'Missed Trade': return 'bg-orange-400';
      default: return 'bg-gray-500';
    }
  };

  const getRecommendations = (cell: AnalysisModalData) => {
    const recommendations = [];
    
    if (cell.errorRate > 50) {
      recommendations.push('‚ö†Ô∏è –í—ã—Å–æ–∫–∞—è —á–∞—Å—Ç–æ—Ç–∞ –æ—à–∏–±–æ–∫ –≤ —ç—Ç–æ–π –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏. –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –ø–æ–¥–≥–æ—Ç–æ–≤–∫—É –¥–ª—è —ç—Ç–æ–≥–æ —Å–µ—Ç–∞–ø–∞ –≤ –¥–∞–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏.');
    }
    
    if (cell.errorTypes['Revenge Trade'] > 0) {
      recommendations.push('üî• –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã —Å–¥–µ–ª–∫–∏ –∏–∑ –º–µ—Å—Ç–∏. –î–µ–ª–∞–π—Ç–µ –ø–µ—Ä–µ—Ä—ã–≤—ã –ø–æ—Å–ª–µ —É–±—ã—Ç–æ—á–Ω—ã—Ö —Å–¥–µ–ª–æ–∫.');
    }
    
    if (cell.errorTypes['Rule Break: Size'] > 0) {
      recommendations.push('üí∞ –ü—Ä–æ–±–ª–µ–º—ã —Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º –∫–∞–ø–∏—Ç–∞–ª–æ–º. –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä—É–π—Ç–µ —Ä–∞—Å—á–µ—Ç —Ä–∞–∑–º–µ—Ä–∞ –ø–æ–∑–∏—Ü–∏–∏.');
    }
    
    if (cell.errorTypes['Early Exit'] > 0) {
      recommendations.push('‚è∞ –†–∞–Ω–Ω–∏–µ –≤—ã—Ö–æ–¥—ã –∏–∑ –ø—Ä–∏–±—ã–ª–∏. –†–∞–±–æ—Ç–∞–π—Ç–µ –Ω–∞–¥ —Ç–µ—Ä–ø–µ–Ω–∏–µ–º –∏ —Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ–º –ø–ª–∞–Ω—É.');
    }
    
    if (recommendations.length === 0) {
      recommendations.push('‚úÖ –•–æ—Ä–æ—à–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã –≤ —ç—Ç–æ–π –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏.');
    }
    
    return recommendations;
  };

  return (
    <>
      <Card className="bg-card/60 backdrop-blur border-border/50">
        <CardHeader>
          <CardTitle>–ö–∞—Ä—Ç–∞ –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫</CardTitle>
          <p className="text-sm text-muted-foreground">
            –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —á–∞—Å—Ç–æ—Ç—ã –æ—à–∏–±–æ–∫ –ø–æ —Å–µ—Ç–∞–ø–∞–º –∏ —Å–µ—Å—Å–∏—è–º
          </p>
        </CardHeader>
        
        <CardContent>
          <div className="space-y-4">
            {/* Heatmap Grid */}
            <div className="overflow-x-auto">
              <div className="min-w-[800px]">
                {/* Header */}
                <div className="grid gap-1 mb-2" style={{ gridTemplateColumns: `150px repeat(${sessions.length}, 1fr)` }}>
                  <div className="text-sm font-medium text-muted-foreground">–°–µ—Ç–∞–ø</div>
                  {sessions.map(session => (
                    <div key={session} className="text-sm font-medium text-center text-muted-foreground">
                      {session}
                    </div>
                  ))}
                </div>
                
                {/* Rows */}
                {setups.map(setup => (
                  <div key={setup} className="grid gap-1 mb-1" style={{ gridTemplateColumns: `150px repeat(${sessions.length}, 1fr)` }}>
                    <div className="flex items-center text-sm font-medium py-2">
                      {setup}
                    </div>
                    {sessions.map(session => {
                      const cell = heatmapData.find(c => c.setup === setup && c.session === session);
                      if (!cell) return null;
                      
                      return (
                        <button
                          key={session}
                          onClick={() => openAnalysis(cell)}
                          className={`
                            p-3 rounded-lg text-center transition-all duration-200 hover:scale-105 hover:shadow-lg
                            ${getCellColor(cell.errorRate, cell.total)}
                            ${getCellTextColor(cell.total)}
                            ${cell.total > 0 ? 'cursor-pointer' : 'cursor-default'}
                          `}
                        >
                          {cell.total > 0 ? (
                            <>
                              <div className="text-lg font-bold">{cell.errorRate}%</div>
                              <div className="text-xs opacity-80">{cell.errors}/{cell.total}</div>
                            </>
                          ) : (
                            <div className="text-sm">-</div>
                          )}
                        </button>
                      );
                    })}
                  </div>
                ))}
              </div>
            </div>
            
            {/* Legend */}
            <div className="flex items-center justify-center gap-6 text-xs">
              <div className="flex items-center gap-2">
                <div className="w-3 h-3 rounded-full bg-green-600"></div>
                <span>–ß–∏—Å—Ç–æ (0%)</span>
              </div>
              <div className="flex items-center gap-2">
                <div className="w-3 h-3 rounded-full bg-green-500"></div>
                <span>–ù–µ–º–Ω–æ–≥–æ (&lt;20%)</span>
              </div>
              <div className="flex items-center gap-2">
                <div className="w-3 h-3 rounded-full bg-yellow-500"></div>
                <span>–ú–Ω–æ–≥–æ (20-50%)</span>
              </div>
              <div className="flex items-center gap-2">
                <div className="w-3 h-3 rounded-full bg-red-500"></div>
                <span>–ö—Ä–∏—Ç–∏—á–Ω–æ (&gt;50%)</span>
              </div>
              <div className="ml-4 text-muted-foreground">
                –ö–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ —è—á–µ–π–∫—É –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –æ—à–∏–±–æ–∫ –≤ —ç—Ç–æ–π –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏
              </div>
            </div>
          </div>
        </CardContent>
      </Card>

      {/* Analysis Modal */}
      <Dialog open={!!selectedCell} onOpenChange={() => setSelectedCell(null)}>
        <DialogContent className="max-w-2xl">
          <DialogHeader>
            <DialogTitle>–ê–Ω–∞–ª–∏–∑ –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫</DialogTitle>
            <p className="text-sm text-muted-foreground">
              –°–µ—Ç–∞–ø: <strong>{selectedCell?.setup}</strong> | –°–µ—Å—Å–∏—è: <strong>{selectedCell?.session}</strong>
            </p>
          </DialogHeader>
          
          {selectedCell && (
            <div className="space-y-6">
              {/* Stats Overview */}
              <div className="grid grid-cols-3 gap-4">
                <div className="text-center">
                  <div className="text-2xl font-bold text-red-500">{selectedCell.errors}</div>
                  <div className="text-sm text-muted-foreground">–°–¥–µ–ª–æ–∫ —Å –æ—à–∏–±–∫–∞–º–∏</div>
                </div>
                <div className="text-center">
                  <div className="text-2xl font-bold">{selectedCell.total}</div>
                  <div className="text-sm text-muted-foreground">–í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫</div>
                </div>
                <div className="text-center">
                  <div className="text-2xl font-bold text-red-500">{selectedCell.errorRate}%</div>
                  <div className="text-sm text-muted-foreground">–ß–∞—Å—Ç–æ—Ç–∞ –æ—à–∏–±–æ–∫</div>
                </div>
              </div>

              {/* Error Types */}
              <div>
                <h3 className="font-semibold mb-3">–¢–∏–ø—ã –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫:</h3>
                <div className="space-y-2">
                  {Object.entries(selectedCell.errorTypes).map(([errorType, count]) => (
                    <div key={errorType} className="flex items-center justify-between p-3 rounded-lg bg-card border">
                      <div className="flex items-center gap-3">
                        <div className={`w-3 h-3 rounded-full ${getErrorTypeColor(errorType)}`} />
                        <div>
                          <div className="font-medium">{errorType}</div>
                          <div className="text-sm text-muted-foreground">
                            {/* Add descriptions based on error type */}
                            {errorType === 'Rule Break: Entry' && '–ó–∞–∫—Ä—ã—Ç–∏–µ –ø—Ä–∏–±—ã–ª—å–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏ —Å–ª–∏—à–∫–æ–º —Ä–∞–Ω–æ –∏–∑-–∑–∞ —Å—Ç—Ä–∞—Ö–∞'}
                            {errorType === 'Rule Break: Size' && '–ù–∞—Ä—É—à–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª —Ä–∞–∑–º–µ—Ä–∞ –ø–æ–∑–∏—Ü–∏–∏ –∏–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∏—Å–∫–∞–º–∏'}
                            {errorType === 'Revenge Trade' && '–°–¥–µ–ª–∫–∞ –∏–∑ –º–µ—Å—Ç–∏ –ø–æ—Å–ª–µ —É–±—ã—Ç–∫–∞'}
                            {errorType === 'Early Exit' && '–†–∞–Ω–Ω–∏–π –≤—ã—Ö–æ–¥ –∏–∑ –ø—Ä–∏–±—ã–ª—å–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏'}
                            {errorType === 'Hoped Hope' && '–£–¥–µ—Ä–∂–∞–Ω–∏–µ —É–±—ã—Ç–æ—á–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏ —Å–ª–∏—à–∫–æ–º –¥–æ–ª–≥–æ'}
                            {errorType === 'Averaging Down' && '–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫ —É–±—ã—Ç–æ—á–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏'}
                            {errorType === 'Missed Trade' && '–ü—Ä–æ–ø—É—â–µ–Ω–Ω—ã–π —Ç–æ—Ä–≥–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª'}
                          </div>
                        </div>
                      </div>
                      <div className="flex items-center gap-2">
                        <Badge variant="secondary">{count}</Badge>
                        <span className="text-sm text-muted-foreground">
                          {((count / selectedCell.total) * 100).toFixed(0)}%
                        </span>
                      </div>
                    </div>
                  ))}
                </div>
              </div>

              {/* Impact on Results */}
              <div>
                <h3 className="font-semibold mb-3">–í–ª–∏—è–Ω–∏–µ –Ω–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç:</h3>
                <div className="grid grid-cols-2 gap-4">
                  <div className="p-3 rounded-lg bg-card border text-center">
                    <div className="text-sm text-muted-foreground">–°—Ä–µ–¥–Ω–∏–π R (—Å –æ—à–∏–±–∫–∞–º–∏)</div>
                    <div className={`text-xl font-bold ${selectedCell.avgRWithErrors >= 0 ? 'text-profit' : 'text-loss'}`}>
                      {selectedCell.avgRWithErrors > 0 ? '+' : ''}{selectedCell.avgRWithErrors}R
                    </div>
                  </div>
                  <div className="p-3 rounded-lg bg-card border text-center">
                    <div className="text-sm text-muted-foreground">–°—Ä–µ–¥–Ω–∏–π R (–≤—Å–µ —Å–¥–µ–ª–∫–∏)</div>
                    <div className={`text-xl font-bold ${selectedCell.avgR >= 0 ? 'text-profit' : 'text-loss'}`}>
                      {selectedCell.avgR > 0 ? '+' : ''}{selectedCell.avgR}R
                    </div>
                  </div>
                </div>
              </div>

              {/* Recommendations */}
              <div>
                <h3 className="font-semibold mb-3">–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:</h3>
                <div className="space-y-2">
                  {getRecommendations(selectedCell).map((recommendation, index) => (
                    <div key={index} className="p-3 rounded-lg bg-orange-50 dark:bg-orange-900/20 border-l-4 border-orange-500">
                      <p className="text-sm">{recommendation}</p>
                    </div>
                  ))}
                </div>
              </div>
            </div>
          )}
        </DialogContent>
      </Dialog>
    </>
  );
}